// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: alert.proto

package alert

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AlertService_SendAlert_FullMethodName  = "/alert.AlertService/SendAlert"
	AlertService_SyncAlerts_FullMethodName = "/alert.AlertService/SyncAlerts"
)

// AlertServiceClient is the client API for AlertService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlertServiceClient interface {
	SendAlert(ctx context.Context, in *Alert, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SyncAlerts(ctx context.Context, in *SyncAlertsRequest, opts ...grpc.CallOption) (AlertService_SyncAlertsClient, error)
}

type alertServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAlertServiceClient(cc grpc.ClientConnInterface) AlertServiceClient {
	return &alertServiceClient{cc}
}

func (c *alertServiceClient) SendAlert(ctx context.Context, in *Alert, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AlertService_SendAlert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) SyncAlerts(ctx context.Context, in *SyncAlertsRequest, opts ...grpc.CallOption) (AlertService_SyncAlertsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AlertService_ServiceDesc.Streams[0], AlertService_SyncAlerts_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &alertServiceSyncAlertsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AlertService_SyncAlertsClient interface {
	Recv() (*Alert, error)
	grpc.ClientStream
}

type alertServiceSyncAlertsClient struct {
	grpc.ClientStream
}

func (x *alertServiceSyncAlertsClient) Recv() (*Alert, error) {
	m := new(Alert)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AlertServiceServer is the server API for AlertService service.
// All implementations should embed UnimplementedAlertServiceServer
// for forward compatibility
type AlertServiceServer interface {
	SendAlert(context.Context, *Alert) (*emptypb.Empty, error)
	SyncAlerts(*SyncAlertsRequest, AlertService_SyncAlertsServer) error
}

// UnimplementedAlertServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAlertServiceServer struct {
}

func (UnimplementedAlertServiceServer) SendAlert(context.Context, *Alert) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAlert not implemented")
}
func (UnimplementedAlertServiceServer) SyncAlerts(*SyncAlertsRequest, AlertService_SyncAlertsServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncAlerts not implemented")
}

// UnsafeAlertServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlertServiceServer will
// result in compilation errors.
type UnsafeAlertServiceServer interface {
	mustEmbedUnimplementedAlertServiceServer()
}

func RegisterAlertServiceServer(s grpc.ServiceRegistrar, srv AlertServiceServer) {
	s.RegisterService(&AlertService_ServiceDesc, srv)
}

func _AlertService_SendAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Alert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).SendAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertService_SendAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).SendAlert(ctx, req.(*Alert))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_SyncAlerts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncAlertsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AlertServiceServer).SyncAlerts(m, &alertServiceSyncAlertsServer{stream})
}

type AlertService_SyncAlertsServer interface {
	Send(*Alert) error
	grpc.ServerStream
}

type alertServiceSyncAlertsServer struct {
	grpc.ServerStream
}

func (x *alertServiceSyncAlertsServer) Send(m *Alert) error {
	return x.ServerStream.SendMsg(m)
}

// AlertService_ServiceDesc is the grpc.ServiceDesc for AlertService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlertService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "alert.AlertService",
	HandlerType: (*AlertServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendAlert",
			Handler:    _AlertService_SendAlert_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncAlerts",
			Handler:       _AlertService_SyncAlerts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "alert.proto",
}
